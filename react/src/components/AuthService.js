export default class AuthService {
    
    constructor(domain) {
        this.domain=domain || 'http://localhost:8000/site_users'//address where server is running
        //this.fetch=this.fetch.bind(this)
        this.login=this.login.bind(this)
    }
    
    _checkStatus(response) {
        //console.log(response)
        if(response.token){
            //console.log("SUCESSSSSSSSSS")
            response.sucesss = true
            return response
        }else {
            var error = {}
         //   console.log("FAILLLLLLLLLLLLLLLLLLll")
            error.detail=response
            error.sucesss = false
            return error
        }
    }
    
    
    login(username,password) {
      //  console.log(username,password)
      var headers={
        'Accept':'application/json',
        'Content-Type':'application/json'
    }   
    var userprofile = {}
    var name
       return  fetch(`${this.domain}/login/`,{
            method:'POST',
            body:JSON.stringify({
                'username':username,
                'password':password//convert to strings
            }),
            headers:headers
            
        }).catch( e=>{console.log("Server error " )})
        .then(response=>response.json())
        .then(res=>{
            //console.log(res)
            res = this._checkStatus(res)
            if(res.token){

                console.log('logggggggggggg')
                this.setToken(res) //this will set the token at local storage
            }
            if(this.loggedIn){
           //     console.log("token loggged in ")
                 headers['Authorization'] = 'Token ' + this.getToken()
                 userprofile = this.getUserprofile(name)
                res.headers = headers
                res.userprofile = userprofile
              //  console.log(res.headers)
                
                return res
            }
            else{
                return Promise.resolve(res);//Promise is an object that represents either completion or failure of a user task
            }           
            
               
        })
        
    }

    loggedIn(){
        // Checks if there is a saved token and it's still valid
        const token = this.getToken() // Getting token from sessionStorage
        const userprofile = this.getUserprofile()
        console.log("LOGGED IN TOKEN")
        return !!token && !!userprofile
    }
    setToken(res) {
        //save the user token in local storage
        const token = res.token
        const profile = JSON.stringify(res.user)
        sessionStorage.setItem('token',token)
        sessionStorage.setItem('userprofile',profile)
      //  console.log("SETTING TOKEN HERE")
     //   console.log(sessionStorage.getItem('token'))
     //   console.log(sessionStorage.getItem('userprofile'))
    }
    getToken(){
        //to retrive the token from users local storage
        return sessionStorage.getItem('token')
    }
    getUserprofile(){
        return sessionStorage.getItem('userprofile')
    }
    logout(){
        //clear user token and profile data from local storage
        console.log(JSON.stringify(this.getToken()))
        console.log(typeof(this.getToken()))
        console.log(`${this.domain}/logout/`)
        fetch(`${this.domain}/logout/`,{
            method:'POST',
            headers:{
                'Content-Type':'application/json',
                'Authorization' : "Token " + this.getToken()
            }   
            
        })
        .then(response=>response.json())
        .then(res=>{
            //console.log(res)
            console.log(res)
        })
        sessionStorage.removeItem('token');
        sessionStorage.removeItem('userprofile')
    }


    /*
    fetch(url,options){//options-->object
         // performs api calls sending the required authentication headers
         console.log(url)
         console.log(options)
         const headers={
             'Accept':'application/json',
             'Content-Type':'application/json'
         }
    
    if(this.loggedIn()) {
        //The bearer token is a cryptic string, usually generated by the server in response to a login request
        console.log("token loggged in ")
        headers['Authorization'] = 'Token ' + this.getToken()
    }
    
    return this.fetch(url,{
        headers,
       ...options 
})
//.then(this._checkStatus)
.then(response=>response.json())
.catch(e =>{
    console.log(e)
})
    }
    
    */
}